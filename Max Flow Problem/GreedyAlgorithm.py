# -*- coding: utf-8 -*-
"""Greedy .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A1Wg0a-o_CEcSIXhAWSybyDjpLuXOSAK
"""

# Python program for implementation
# of Ford Fulkerson algorithm

from collections import defaultdict
import time  # Import the time module

# This class represents a directed graph
# using adjacency matrix representation
class Graph:

    def __init__(self, graph):
        self.graph = graph  # residual graph
        self.ROW = len(graph)

    '''Returns true if there is a path from source 's' to sink 't' in
    residual graph. Also fills parent[] to store the path '''

    def BFS(self, s, t, parent):

        # Mark all the vertices as not visited
        visited = [False] * (self.ROW)

        # Create a queue for BFS
        queue = []

        # Mark the source node as visited and enqueue it
        queue.append(s)
        visited[s] = True

        # Standard BFS Loop
        while queue:

            # Dequeue a vertex from queue
            u = queue.pop(0)

            # Get all adjacent vertices of the dequeued vertex u
            for ind, val in enumerate(self.graph[u]):
                if not visited[ind] and val > 0:
                    # If we find a connection to the sink node
                    queue.append(ind)
                    visited[ind] = True
                    parent[ind] = u
                    if ind == t:
                        return True

        return False

    # Returns the maximum flow from s to t in the given graph
    def FordFulkerson(self, source, sink):
        parent = [-1] * (self.ROW)
        max_flow = 0  # There is no flow initially

        # Augment the flow while there is path from source to sink
        while self.BFS(source, sink, parent):
            path_flow = float("Inf")
            s = sink
            while s != source:
                path_flow = min(path_flow, self.graph[parent[s]][s])
                s = parent[s]

            max_flow += path_flow

            # update residual capacities of the edges and reverse edges
            v = sink
            while v != source:
                u = parent[v]
                self.graph[u][v] -= path_flow
                self.graph[v][u] += path_flow
                v = parent[v]

        return max_flow

    # Method to measure the runtime of the Ford Fulkerson algorithm
    def run_with_timing(self, source, sink):
        start_time = time.time()  # Get the start time
        max_flow = self.FordFulkerson(source, sink)
        end_time = time.time()  # Get the end time
        runtime = end_time - start_time  # Calculate the runtime
        return max_flow, runtime  # Return both max flow and runtime


# Create a graph given in the above diagram
graph = [[0, 16, 13, 0, 0, 0],
         [0, 0, 10, 12, 0, 0],
         [0, 4, 0, 0, 14, 0],
         [0, 0, 9, 0, 0, 20],
         [0, 0, 0, 7, 0, 4],
         [0, 0, 0, 0, 0, 0]]

g = Graph(graph)

source = 0
sink = 5

max_flow, runtime = g.run_with_timing(source, sink)
print(f"The maximum possible flow is {max_flow}")
print(f"Runtime of the Ford Fulkerson algorithm: {runtime:.6f} seconds")